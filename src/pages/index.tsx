import { api } from "@/utils/api";
import { type GetServerSideProps, type NextPage } from "next";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";

const Home: NextPage = () => {
  const {
    data: chat,
    isLoading,
    isFetching,
    isInitialLoading,
  } = api.chat.getAll.useQuery();
  const { data: session } = useSession();
  const [message, setMessage] = useState("");
  const container = useRef<HTMLDivElement>(null);

  const utils = api.useContext();
  const postMessage = api.chat.postMessage.useMutation({
    onMutate: async (newEntry) => {
      await utils.chat.getAll.cancel();
      utils.chat.getAll.setData(undefined, (prevEntries) => {
        if (prevEntries) {
          return [...prevEntries, newEntry];
        } else {
          return [newEntry];
        }
      });
    },
    onSettled: async () => {
      await utils.chat.getAll.invalidate();
    },
  });

  useEffect(() => {
    if (container && container.current) {
      const element = container.current;
      element.scroll({
        top: element.scrollHeight,
        left: 0,
        behavior: "smooth",
      });
    }
  }, [container, chat]);

  return (
    <>
      <Head>
        <title>Guestbook</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="h-[600px] overflow-y-auto py-10" ref={container}>
        <div className="container">
          <h1 className="mb-5">IM a homepage</h1>

          {isLoading ? (
            <h2>Loading...</h2>
          ) : (
            <div className="flex flex-col gap-4">
              {chat?.map((entry, index) => {
                return (
                  <div
                    key={index}
                    className={`${
                      entry.name === session?.user?.name
                        ? "chat-end"
                        : "chat-start"
                    } chat`}
                  >
                    <div className="chat-image avatar">
                      <div className="w-10 rounded-full">
                        <Image
                          src={session?.user?.image || ""}
                          width={20}
                          height={20}
                          alt="Avatar"
                          className="h-10 w-10"
                          priority
                        />
                      </div>
                    </div>
                    <div className="chat-bubble">
                      <p>{entry.message}</p>
                      <span>- {entry.name}</span>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          <form
            className="mt-6 flex gap-2"
            onSubmit={(event) => {
              event.preventDefault();
              postMessage.mutate({
                name: session?.user?.name as string,
                message,
              });
              setMessage("");
            }}
          >
            <input
              type="text"
              className="rounded-md border-2 border-zinc-800 bg-neutral-900 px-4 py-2 focus:outline-none"
              placeholder="Your message..."
              minLength={2}
              maxLength={100}
              value={message}
              onChange={(event) => setMessage(event.target.value)}
            />
            <button
              type="submit"
              className="rounded-md border-2 border-zinc-800 p-2 focus:outline-none"
            >
              Submit
            </button>
          </form>
        </div>
      </section>
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });

  if (!session) {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
};
